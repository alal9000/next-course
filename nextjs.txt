-nextjs is a framework for building fast and search engine friendly applications
-react is a library for building interactive UIs
-a framework is a collection of libraries, tools and conventions that streamline app developement
-there are two ways we can exec JS - 1. within a web browser on the client 2. within a node.js runtime on the server
-a nodeJS runtime is an environment that can exec JS code. So a nodejs runtime is just a fancy term for a program that can exec JS code
-in nextJS our router is based on the file system. The routing system is also based on convention not configuration
-components that are rendered on the server do not have interactivity so they cannot access browsers events and apis like: click, submit, change, localStorage etc. They cannot maintain state or use effects. These functionalities are only available in client components - so in real world apps we often use a mix of server and client components. We should default to server components and use client components only when we absolutely need them
-in nextjs all components inside the app folder are server components by default
-files and folders in the app folder are not publically accessible unless we add a page file inside it
-react query is a better way to fetch data then using the state and effect hooks in react
-problems with rendering on the client: large bundles shipped to the client, resource intensive (consume memory on the client), no SEO, less secure - also fetching data on the client involves an extra round trip to the client because first the client downloads all the html template, js, css and assets from the server and any additional data fecthing is a seperate roundtrip
-benefits of typescript: we get code completion or intellisense and we can catch errors at build (compile) time before we run and deploy our app
-to fetch data, whenever possible we should fetch it in server components - because it is more SEO friendly and we dont have an extra request to fetch the data seperately from the server and with server fetching we also have caching
-caching - storing data somewhere where its faster to access. There are 3 places where we can get the data from: memory, file system or network - as we go down this list getting the data becomes slower. nextJS comes with a built in data cache
- caching behaviour is only implemented in the fetch function - not a 3rd party lib
-two types of rendering in nextJS: static and dynamic. Done for optimization. Static rendering: renders only once when the app is built for production (renders at build time). Dynamic rendering - renders everytime there is a request (renders at request time)
-rendering in njs can happen on client or on the server. If it happens on the server it can happen at build time (static rendering) or request time (dynamic rendering)
-rendering refers to the process of generating or producing output
-reserve the global css file for styles that are truely global like: body, headings, hyperlinks, fonts etc - for styles that are specific to a page or a component use css modules or tailwind
-css module is a css file that is scoped to a page or a component. Its a way to prevent styles from clashing or overwriting each other
-we cannot use hypens when naming a JS property
-SSR (server side rendering) makes our app SEO friendly
-SSG (static site generation): to further improve performance we can pre-render pages and components that have static data during the build phase and serve them whenever needed
-caching reduces the need to retrieve the same piece of data twice
-tailwind is a utility class css framework
-daisyUI is a component library built on top of tailwind - it provides a collection of pre-designed and reuseable components such as badge, card, button etc
-njs has a built in router based on the file sys. To make our routes publicy accessible we have to put a special page file in the our route folder
-a dynamic route is a route with a parameter
-<a> elements causes a full page reload so use <Link> in njs instead - which gives us client side navigation
-QSPs (query string parameters) are a way to pass state on the server
-we cannot access QSPs in our components, we can only do that in our pages. Anytime we need to access the url or QSPs we have to do that in our pages adn pass data to our components
-we use layouts to create UIs that are shared between multiple pages
-the link element in next only downloads the content of the target page, ie: it doesn't re-download css / js files, layout components like nav bar etc. It also prefetches links that are in the viewport. ie: predownloads linked urls at the target url
-as we navigate in our app, njs caches (stores the payload of) the pages on the client. This client cache only lasts for one session and clears when we do a full page reload
-programmatic navigation: take a user to new page as the result of clicking a button or submitting a form
-we can use the router object if we need programmatic navigation
-we cannot use error files to captures errors that occur in our root layout component - we need to create a seperate error file for capturing errors that happen in that layout. That error file is called global error
-in real apps we should log errors using a logging service
-a dynamic route is one that takes one or more parameters. To add parameters to our routes we wrap directory names with square brackets ie: [id]
-in standard react apps we use the state hook for managing component state, in server render apps, however, we use query string parameters (QSPs) to keep state. This allows us to bookmark pages in a specific state like a filtered and sorted list of products
-file conventions (file names that njs looks for): page.tsx, layout.tsx, loading.tsx, not-found.tsx, error.tsx
-your url folders should have either a page file or a route file but not both. If we want to show something to the user, return markup / html content we should add a page file, but if we want to handle http requests we should add a route file.
-route handler: a function that handles http requests
-http requests have various methods. ie: GET, POST, PUT, PATCH and DELETE
-to prevent caching we have to add the request object as a parameter in our route files, even though its not used
-in real apps: the id gets generated on the server (by database) and we need to validate the incoming request
-status: 400 = bad request, 200 = successful, 201 = created, 301 = moved permanently, 500 = internal server error and 404 = not found
-we can use PUT or PATCH for updating an object. We should use PUT for replacing an entire object and PATCH for updating one or more properties
-an API is an interface that allows two software entities to talk to each other
-database engines: MySQL, PostgreSQL, MongoDB, SQL Server
-ORM (object relational mapper): is a tool thats sits between our app and our db.
-in prisma models, by default all fields are required
-scalar types are primitive types that hold a single value like: string, number, boolean etc. By contrast compound or non-scalar types can represent multiple values or a collection of values
-as we define or change our models in prisma, we have to create migrations - these migrations are used to keep our prisma schema insync with our db schema
-to connect with our database we create an instance of PrismaClient()
-make sure there is only a single instance of the PrismaClient() running in our app.
-the @ in import statements represents the src directory or project directory
-to store the files that a user uploads we have to use a cloud platform
-OAuth: stands for 'open authentication' and is a standard authentication protocol that a lot of websites like google fb twitter implement. With OAuth we can allow our users to login with their google or twitter accounts
-we can read our environment variables with process.env.{ENVIRONMENT_VARIABEL_HERE}
-we can use an exclaimation to assert to the TS compiler that we definately have a value in a variable if it is saying the type of a property is potentially undefined ie: if we see this error - Type 'string | undefined' is not assignable to type 'string'. Type 'undefined' is not assignable to type 'string'.ts(2322)
-when a user logs in next-auth creates an authentication session for that user - by default that session is represented as a JSON web token. A JSON web token or JWT is like a passport or drivers licence (ID card) that the client uses to identify itself
-cookies are small pieces of information that are exchanged between client and server with each request. So everytime our app sends a request to the server - the cookie stored in our browser is sent to the server
-to protect our routes we use middleware. With middleware we can run code before a request is completed. So we can create a middleware function that get exec on every request
- we can use syntatic sugar to import and export in one go ie: export { default } from "next-auth/middleware"; - here we export the default object imported from the next-auth/middleware module
-when we use a db adapter, next-auth will automatically store user data in our db
-at the current time we cannot use db sessions with social logins or OAuth providers
-using the bcrypt library we can encrypt passwords upon inserting them into the db
-we have two ways to style our emails - css properties or tailwind


-protocol and API meaning, 
* "moduleResolution": "bundler", (previous setting in tsconfig.json)



*do summary for fundamentals