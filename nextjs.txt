-nextjs is a framework for building fast and search engine friendly applications
-react is a library for building interactive UIs
-a framework is a collection of libraries, tools and conventions that streamline app developement
-there are two ways we can exec JS - 1. within a web browser on the client 2. within a node.js runtime on the server
-a nodeJS runtime is an environment that can exec JS code. So a nodejs runtime is just a fancy term for a program that can exec JS code
-in nextJS our router is based on the file system. The routing system is also based on convention not configuration
-components that are rendered on the server do not have interactivity so they cannot access browsers events and apis like: click, submit, change, localStorage etc. They cannot maintain state or use effects. These functionalities are only available in client components - so in real world apps we often use a mix of server and client components. We should default to server components and use client components only when we absolutely need them
-in nextjs all components inside the app folder are server components by default
-files and folders in the app folder are not publically accessible unless we add a page file inside it
-react query is a better way to fetch data then using the state and effect hooks in react
-problems with rendering on the client: large bundles shipped to the client, resource intensive (consume memory on the client), no SEO, less secure - also fetching data on the client involves an extra round trip to the client because first the client downloads all the html template, js, css and assets from the server and any additional data fecthing is a seperate roundtrip
-benefits of typescript: we get code completion or intellisense and we can catch errors at build (compile) time before we run and deploy our app
-to fetch data, whenever possible we should fetch it in server components - because it is more SEO friendly and we dont have an extra request to fetch the data seperately from the server and with server fetching we also have caching
-caching - storing data somewhere where its faster to access. There are 3 places where we can get the data from: memory, file system or network - as we go down this list getting the data becomes slower. nextJS comes with a built in data cache
- caching behaviour is only implemented in the fetch function - not a 3rd party lib
-two types of rendering in nextJS: static and dynamic. Done for optimization. Static rendering: renders only once when the app is built for production (renders at build time). Dynamic rendering - renders everytime there is a request (renders at request time)
-rendering in njs can happen on client or on the server. If it happens on the server it can happen at build time (static rendering) or request time (dynamic rendering)
-rendering refers to the process of generating or producing output
-reserve the global css file for styles that are truely global like: body, headings, hyperlinks, fonts etc - for styles that are specific to a page or a component use css modules or tailwind
-css module is a css file that is scoped to a page or a component. Its a way to prevent styles from clashing or overwriting each other
-we cannot use hypens when naming a JS property
-SSR (server side rendering) makes our app SEO friendly
-SSG (static site generation): to further improve performance we can pre-render pages and components that have static data during the build phase and serve them whenever needed
-caching reduces the need to retrieve the same piece of data twice


*do summary for fundamentals